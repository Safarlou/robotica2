//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.RoboticsTutorial4.Y2006.M06, Version=0.0.0.0, Culture=neutral, PublicKeyToke" +
    "n=04dc44ac2623a96f")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.RoboticsTutorial4.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html", ElementName="RoboticsTutorial4State")]
    public class RoboticsTutorial4State : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RoboticsTutorial4State() {
        }
        
        private bool _MotorEnabled;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool MotorEnabled {
            get {
                return this._MotorEnabled;
            }
            set {
                this._MotorEnabled = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RoboticsTutorial4State to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State typedTarget = ((global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State)(target));
            typedTarget._MotorEnabled = this._MotorEnabled;
        }
        
        /// <summary>
        ///Clones RoboticsTutorial4State
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State target0 = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RoboticsTutorial4State to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._MotorEnabled);
        }
        
        /// <summary>
        ///Deserializes RoboticsTutorial4State
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RoboticsTutorial4State</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._MotorEnabled = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html", ElementName="StopRequest")]
    public class StopRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public StopRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current StopRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest typedTarget = ((global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest)(target));
        }
        
        /// <summary>
        ///Clones StopRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest target0 = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current StopRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes StopRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized StopRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html", ElementName="ForwardRequest")]
    public class ForwardRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ForwardRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current ForwardRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest typedTarget = ((global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest)(target));
        }
        
        /// <summary>
        ///Clones ForwardRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest target0 = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ForwardRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes ForwardRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ForwardRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html", ElementName="BackwardRequest")]
    public class BackwardRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BackwardRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current BackwardRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest typedTarget = ((global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest)(target));
        }
        
        /// <summary>
        ///Clones BackwardRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest target0 = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BackwardRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes BackwardRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BackwardRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html", ElementName="TurnLeftRequest")]
    public class TurnLeftRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TurnLeftRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current TurnLeftRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest typedTarget = ((global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest)(target));
        }
        
        /// <summary>
        ///Clones TurnLeftRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest target0 = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TurnLeftRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes TurnLeftRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TurnLeftRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html", ElementName="TurnRightRequest")]
    public class TurnRightRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TurnRightRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current TurnRightRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest typedTarget = ((global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest)(target));
        }
        
        /// <summary>
        ///Clones TurnRightRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest target0 = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TurnRightRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes TurnRightRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TurnRightRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Stop : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Stop() {
        }
        
        public Stop(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest body) : 
                base(body) {
        }
        
        public Stop(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Forward : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Forward() {
        }
        
        public Forward(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest body) : 
                base(body) {
        }
        
        public Forward(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Backward : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Backward() {
        }
        
        public Backward(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest body) : 
                base(body) {
        }
        
        public Backward(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class TurnLeft : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public TurnLeft() {
        }
        
        public TurnLeft(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest body) : 
                base(body) {
        }
        
        public TurnLeft(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class TurnRight : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public TurnRight() {
        }
        
        public TurnRight(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest body) : 
                base(body) {
        }
        
        public TurnRight(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoboticsTutorial4Operations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Get, global:: Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Replace, global:: Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Stop, global:: Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Forward, global:: Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Backward, global:: Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeft, global:: Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRight> {
        
        public RoboticsTutorial4Operations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Get operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Get operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State();
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Replace operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State();
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State();
            }
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Replace operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State body, out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4State();
            }
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Stop() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest();
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Stop operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Stop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Stop(out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Stop operation) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest();
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Stop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Stop(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest();
            }
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Stop operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Stop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Stop(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest body, out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Stop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.StopRequest();
            }
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Stop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Forward() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest();
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Forward operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Forward(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Forward(out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Forward operation) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest();
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Forward(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Forward(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest();
            }
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Forward operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Forward(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Forward(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest body, out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Forward operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.ForwardRequest();
            }
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Forward(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Backward() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest();
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Backward operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Backward(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Backward(out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Backward operation) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest();
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Backward(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Backward(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest();
            }
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Backward operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Backward(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Backward(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest body, out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Backward operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.BackwardRequest();
            }
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.Backward(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> TurnLeft() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest();
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeft operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeft(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TurnLeft(out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeft operation) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest();
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeft(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> TurnLeft(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest();
            }
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeft operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeft(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TurnLeft(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest body, out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeft operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeftRequest();
            }
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnLeft(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> TurnRight() {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest();
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRight operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRight(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TurnRight(out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRight operation) {
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest();
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRight(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> TurnRight(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest();
            }
            global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRight operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRight(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TurnRight(global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest body, out global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRight operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRightRequest();
            }
            operation = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.TurnRight(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("This tutorial demonstrates how to create a service that partners with abstract, b" +
        "ase definitions of hardware services.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Robotics Tutorial 4 (C#): Drive-By-Wire")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.RoboticsTutorial4Operations = new global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4Operations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.RoboticsTutorial4Operations, "http://schemas.microsoft.com/robotics/2006/06/roboticstutorial4.user.html", "RoboticsTutorial4Operations", ""));
        }
        
        public global::Microsoft.Robotics.Services.RoboticsTutorial4.Proxy.RoboticsTutorial4Operations RoboticsTutorial4Operations;
    }
}
